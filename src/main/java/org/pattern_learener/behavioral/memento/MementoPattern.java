package org.pattern_learener.behavioral.memento;

import org.pattern_learener.behavioral.memento.editor.Editor;
import org.pattern_learener.behavioral.memento.shapes.Circle;
import org.pattern_learener.behavioral.memento.shapes.CompoundShape;
import org.pattern_learener.behavioral.memento.shapes.Dot;
import org.pattern_learener.behavioral.memento.shapes.Rectangle;

import java.awt.*;

/**
 * Суть паттерна - это поведенческий паттерн проектирования, который позволяет сохранять и восстанавливать прошлые состояния объектов,
 * не раскрывая подробностей их реализации.<p>
 * Применимость:<p>
 * - когда вам нужно сохранять мгновенные снимки состояния объекта (или его части), чтобы впоследствии объект можно было восстановить в том же состоянии;<p>
 * - когда прямое получение состояния объекта раскрывает приватные детали его реализации, нарушая инкапсуляцию;<p>
 * Преимущества и недостатки:<p>
 * + не нарушает инкапсуляции исходного объекта;<p>
 * + упрощает структуру исходного объекта. Ему не нужно хранить историю версий своего состояния;<p>
 * - требует много памяти, если клиенты слишком часто создают снимки;<p>
 * - может повлечь дополнительные издержки памяти, если объекты, хранящие историю, не освобождают ресурсы, занятые устаревшими снимками;<p>
 * - в некоторых языках (например, PHP, Python, JavaScript) сложно гарантировать, чтобы только исходный объект имел доступ к состоянию снимка;<p>
 * Реализация:<p>
 * 1. Определите класс создателя, объекты которого должны создавать снимки своего состояния.<p>
 * 2. Создайте класс снимка и опишите в нём все те же поля, которые имеются в оригинальном классе-создателе.<p>
 * 3. Сделайте объекты снимков неизменяемыми. Они должны получать начальные значения только один раз, через свой конструктор.<p>
 * 4. Если ваш язык программирования это позволяет, сделайте класс снимка вложенным в класс создателя.
 * Если нет, извлеките из класса снимка пустой интерфейс, который будет доступен остальным объектам программы.
 * Впоследствии вы можете добавить в этот интерфейс некоторые вспомогательные методы, дающие доступ к метаданным снимка,
 * однако прямой доступ к данным создателя должен быть исключён.<p>
 * 5. Добавьте в класс создателя метод получения снимков. Создатель должен создавать новые объекты снимков, передавая значения своих полей через конструктор.
 * Сигнатура метода должна возвращать снимки через ограниченный интерфейс, если он у вас есть. Сам класс должен работать с конкретным классом снимка.<p>
 * 6. Добавьте в класс создателя метод восстановления из снимка. Что касается привязки к типам, руководствуйтесь той же логикой, что и в пункте 4.
 * 7. Опекуны, будь то история операций, объекты команд или нечто иное, должны знать о том, когда запрашивать снимки у создателя, где их хранить и когда восстанавливать.<p>
 * 8. Связь опекунов с создателями можно перенести внутрь снимков. В этом случае каждый снимок будет привязан к своему
 * создателю и должен будет сам восстанавливать его состояние. Но это будет работать либо если классы снимков вложены в классы создателей,
 * либо если создатели имеют соответствующие сеттеры для установки значений своих полей.
 */
public class MementoPattern {

    public static void main(String[] args) {
        Editor editor = new Editor();
        editor.loadShapes(
                new Circle(10, 10, 10, Color.BLUE),
                new CompoundShape(
                        new Circle(110, 110, 50, Color.RED),
                        new Dot(160, 160, Color.RED)
                ),
                new CompoundShape(
                        new Rectangle(250, 250, 100, 100, Color.GREEN),
                        new Dot(240, 240, Color.GREEN),
                        new Dot(240, 360, Color.GREEN),
                        new Dot(360, 360, Color.GREEN),
                        new Dot(360, 240, Color.GREEN)
                )
        );
    }

}
