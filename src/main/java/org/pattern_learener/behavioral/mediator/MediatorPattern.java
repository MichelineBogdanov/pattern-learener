package org.pattern_learener.behavioral.mediator;

import org.pattern_learener.behavioral.mediator.components.*;
import org.pattern_learener.behavioral.mediator.mediator.Editor;
import org.pattern_learener.behavioral.mediator.mediator.Mediator;
import org.pattern_learener.behavioral.mediator.mediator.Note;

import javax.swing.*;

/**
 * Суть паттерна - это поведенческий паттерн проектирования, который позволяет уменьшить связанность множества классов между собой,
 * благодаря перемещению этих связей в один класс-посредник<p>
 * Применимость:<p>
 * - когда вам сложно менять некоторые классы из-за того, что они имеют множество хаотичных связей с другими классами;<p>
 * - когда вы не можете повторно использовать класс, поскольку он зависит от уймы других классов;<p>
 * - когда вам приходится создавать множество подклассов компонентов, чтобы использовать одни и те же компоненты в разных контекстах;<p>
 * Преимущества и недостатки:<p>
 * + устраняет зависимости между компонентами, позволяя повторно их использовать;<p>
 * + упрощает взаимодействие между компонентами;<p>
 * + централизует управление в одном месте;<p>
 * - может сильно раздуться;<p>
 * Реализация:<p>
 * 1. Найдите группу тесно переплетённых классов, отвязав которые друг от друга, можно получить некоторую пользу.
 * Например, чтобы повторно использовать их код в другой программе.<p>
 * 2. Создайте общий интерфейс посредников и опишите в нём методы для взаимодействия с компонентами.
 * В простейшем случае достаточно одного метода для получения оповещений от компонентов.
 * Этот интерфейс необходим, если вы хотите повторно использовать классы компонентов для других задач.
 * В этом случае всё, что нужно сделать — это создать новый класс конкретного посредника.<p>
 * 3. Реализуйте этот интерфейс в классе конкретного посредника. Поместите в него поля, которые будут содержать ссылки на все объекты компонентов.<p>
 * 4. Вы можете пойти дальше и переместить код создания компонентов в класс посредника, после чего он может напоминать фабрику или фасад.<p>
 * 5. Компоненты тоже должны иметь ссылку на объект посредника. Связь между ними удобнее всего установить, подавая посредника в параметры конструктора компонентов.<p>
 * 6. Измените код компонентов так, чтобы они вызывали метод оповещения посредника, вместо методов других компонентов.
 * С противоположной стороны, посредник должен вызывать методы нужного компонента, когда получает оповещение от компонента.<p>
 */
public class MediatorPattern {

    public static void main(String[] args) {
        Mediator mediator = new Editor();

        mediator.registerComponent(new Title());
        mediator.registerComponent(new TextBox());
        mediator.registerComponent(new AddButton());
        mediator.registerComponent(new DeleteButton());
        mediator.registerComponent(new SaveButton());
        mediator.registerComponent(new List<Note>(new DefaultListModel<>()));
        mediator.registerComponent(new Filter());

        mediator.createGUI();
    }

}
