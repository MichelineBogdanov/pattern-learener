package org.pattern_learener.behavioral.command;

/**
 * Суть паттерна - это поведенческий паттерн проектирования, который превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов,
 * ставить запросы в очередь, логировать их, а также поддерживать отмену операций.<p>
 * Применимость:<p>
 * - когда вы хотите параметризовать объекты выполняемым действием;<p>
 * - когда вы хотите ставить операции в очередь, выполнять их по расписанию или передавать по сети;<p>
 * - когда вам нужна операция отмены;<p>
 * Преимущества и недостатки:<p>
 * + убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют;<p>
 * + позволяет реализовать простую отмену и повтор операций;<p>
 * + позволяет реализовать отложенный запуск операций;<p>
 * + позволяет собирать сложные команды из простых;<p>
 * + реализует принцип открытости/закрытости;<p>
 * - усложняет код программы из-за введения множества дополнительных классов;<p>
 * Реализация:<p>
 * 1. Создайте общий интерфейс команд и определите в нём метод запуска.<p>
 * 2. Один за другим создайте классы конкретных команд. В каждом классе должно быть поле для хранения ссылки на один или
 * несколько объектов-получателей, которым команда будет перенаправлять основную работу.
 * Кроме этого, команда должна иметь поля для хранения параметров, которые нужны при вызове методов получателя.
 * Значения всех этих полей команда должна получать через конструктор.
 * И, наконец, реализуйте основной метод команды, вызывая в нём те или иные методы получателя.<p>
 * 3. Добавьте в классы отправителей поля для хранения команд. Обычно объекты-отправители принимают готовые объекты
 * команд извне — через конструктор либо через сеттер поля команды.<p>
 * 4. Измените основной код отправителей так, чтобы они делегировали выполнение действия команде.<p>
 * 5. Порядок инициализации объектов должен выглядеть так:<p>
 * - Создаём объекты получателей.<p>
 * - Создаём объекты команд, связав их с получателями.<p>
 * - Создаём объекты отправителей, связав их с командами.<p>
 */
public class CommandPattern {

    public static void main(String[] args) {
        Editor editor = new Editor();
        editor.init();
    }

}
