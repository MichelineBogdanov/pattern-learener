package org.pattern_learener.behavioral.template_method;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Суть паттерна - это поведенческий паттерн проектирования, который определяет скелет алгоритма, перекладывая ответственность за некоторые его шаги на подклассы.
 * Паттерн позволяет подклассам переопределять шаги алгоритма, не меняя его общей структуры.<p>
 * Применимость:<p>
 * - когда подклассы должны расширять базовый алгоритм, не меняя его структуры;<p>
 * - когда у вас есть несколько классов, делающих одно и то же с незначительными отличиями.
 * Если вы редактируете один класс, то приходится вносить такие же правки и в остальные классы;<p>
 * Преимущества и недостатки:<p>
 * + облегчает повторное использование кода;<p>
 * - вы жёстко ограничены скелетом существующего алгоритма;<p>
 * - вы можете нарушить принцип подстановки Барбары Лисков, изменяя базовое поведение одного из шагов алгоритма через подкласс;<p>
 * - с ростом количества шагов шаблонный метод становится слишком сложно поддерживать;<p>
 * Реализация:<p>
 * 1. Изучите алгоритм и подумайте, можно ли его разбить на шаги. Прикиньте, какие шаги будут стандартными для всех вариаций алгоритма, а какие — изменяющимися.<p>
 * 2. Создайте абстрактный базовый класс. Определите в нём шаблонный метод. Этот метод должен состоять из вызовов шагов алгоритма.
 * Имеет смысл сделать шаблонный метод финальным, чтобы подклассы не могли переопределить его (если ваш язык программирования это позволяет).<p>
 * 3. Добавьте в абстрактный класс методы для каждого из шагов алгоритма. Вы можете сделать эти методы абстрактными или добавить
 * какую-то реализацию по умолчанию. В первом случае все подклассы должны будут реализовать эти методы, а во втором — только если
 * реализация шага в подклассе отличается от стандартной версии.<p>
 * 4. Подумайте о введении в алгоритм хуков. Чаще всего, хуки располагают между основными шагами алгоритма, а также до и после всех шагов.<p>
 * 5. Создайте конкретные классы, унаследовав их от абстрактного класса. Реализуйте в них все недостающие шаги и хуки.
 */
public class TemplateMethodPattern {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        Network network = null;
        System.out.print("Input user name: ");
        String userName = reader.readLine();
        System.out.print("Input password: ");
        String password = reader.readLine();

        // Вводим сообщение.
        System.out.print("Input message: ");
        String message = reader.readLine();

        System.out.println("""
                Choose social network for posting message.
                1 - Facebook
                2 - Twitter""");
        int choice = Integer.parseInt(reader.readLine());

        // Создаем сетевые объекты и публикуем пост.
        if (choice == 1) {
            network = new Facebook(userName, password);
        } else if (choice == 2) {
            network = new Twitter(userName, password);
        }
        network.post(message);
    }

}
