package org.pattern_learener.creational.builder;

/**
 * Суть паттерна - это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово.
 * Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.<p>
 * Применимость:<p>
 * - когда вы хотите избавиться от «телескопического конструктора»;<p>
 * - когда ваш код должен создавать разные представления какого-то объекта. Например, деревянные и железобетонные дома;<p>
 * - когда вам нужно собирать сложные составные объекты, например, деревья Компоновщика;<p>
 * Преимущества и недостатки:<p>
 * + позволяет создавать продукты пошагово;<p>
 * + позволяет использовать один и тот же код для создания различных продуктов;<p>
 * + изолирует сложный код сборки продукта от его основной бизнес-логики;<p>
 * - усложняет код программы из-за введения дополнительных классов;<p>
 * - клиент будет привязан к конкретным классам строителей, так как в интерфейсе директора может не быть метода получения результата<p>
 * Реализация:<p>
 * 1. Убедитесь в том, что создание разных представлений объекта можно свести к общим шагам.<p>
 * 2. Опишите эти шаги в общем интерфейсе строителей.<p>
 * 3. Для каждого из представлений объекта-продукта создайте по одному классу-строителю и реализуйте их методы строительства.
 * Не забудьте про метод получения результата. Обычно конкретные строители определяют собственные методы получения результата строительства.
 * Вы не можете описать эти методы в интерфейсе строителей, поскольку продукты не обязательно должны иметь общий базовый класс или интерфейс.
 * Но вы всегда сможете добавить метод получения результата в общий интерфейс, если ваши строители производят однородные продукты с общим предком.<p>
 * 4. Подумайте о создании класса директора. Его методы будут создавать различные конфигурации продуктов, вызывая разные шаги одного и того же строителя.<p>
 * 5. Клиентский код должен будет создавать и объекты строителей, и объект директора.
 * Перед началом строительства клиент должен связать определённого строителя с директором.
 * Это можно сделать либо через конструктор, либо через сеттер, либо подав строителя напрямую в строительный метод директора.<p>
 * 6. Результат строительства можно вернуть из директора, но только если метод возврата продукта удалось поместить в общий интерфейс строителей.
 * Иначе вы жёстко привяжете директора к конкретным классам строителей.
 */
public class BuilderPattern {
}
