package org.pattern_learener.creational.singleton;

/**
 * Суть паттерна - это порождающий паттерн проектирования, который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.<p>
 * Применимость:<p>
 * - когда в программе должен быть единственный экземпляр какого-то класса, доступный всем клиентам (например, общий доступ к базе данных из разных частей программы);<p>
 * - когда вам хочется иметь больше контроля над глобальными переменными;<p>
 * Преимущества и недостатки:<p>
 * + гарантирует наличие единственного экземпляра класса;<p>
 * + предоставляет к нему глобальную точку доступа;<p>
 * + реализует отложенную инициализацию объекта-одиночки;<p>
 * - нарушает принцип единственной ответственности класса;<p>
 * - маскирует плохой дизайн;<p>
 * - проблемы многопоточности (в общем то решаемые);<p>
 * - требует постоянного создания Mock-объектов при юнит-тестировании
 */
public class SingletonPattern {

    public static void main(String[] args) {
        Singleton instance = Singleton.getInstance();
        System.out.println(instance);
    }

}
