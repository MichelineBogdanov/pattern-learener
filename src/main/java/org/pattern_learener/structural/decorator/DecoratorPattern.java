package org.pattern_learener.structural.decorator;

/**
 * Суть паттерна - это структурный паттерн проектирования, который позволяет динамически добавлять объектам новую функциональность,
 * оборачивая их в полезные «обёртки».<p>
 * Применимость:<p>
 * - когда вам нужно добавлять обязанности объектам на лету, незаметно для кода, который их использует;<p>
 * - когда нельзя расширить обязанности объекта с помощью наследования;<p>
 * Преимущества и недостатки:<p>
 * + большая гибкость, чем у наследования;<p>
 * + позволяет добавлять обязанности на лету;<p>
 * + можно добавлять несколько новых обязанностей сразу;<p>
 * + позволяет иметь несколько мелких объектов вместо одного объекта на все случаи жизни;<p>
 * - трудно конфигурировать многократно обёрнутые объекты;<p>
 * - обилие крошечных классов<p>
 * Реализация:<p>
 * 1. Убедитесь, что в вашей задаче есть один основной компонент и несколько опциональных дополнений или надстроек над ним.
 * 2. Создайте интерфейс компонента, который описывал бы общие методы как для основного компонента, так и для его дополнений.
 * 3. Создайте класс конкретного компонента и поместите в него основную бизнес-логику.
 * 4. Создайте базовый класс декораторов. Он должен иметь поле для хранения ссылки на вложенный объект-компонент.
 * Все методы базового декоратора должны делегировать действие вложенному объекту.
 * 5. И конкретный компонент, и базовый декоратор должны следовать одному и тому же интерфейсу компонента.
 * 6. Теперь создайте классы конкретных декораторов, наследуя их от базового декоратора.
 * Конкретный декоратор должен выполнять свою добавочную функцию, а затем (или перед этим) вызывать эту же операцию обёрнутого объекта.
 * 7. Клиент берёт на себя ответственность за конфигурацию и порядок обёртывания объектов.
 */
public class DecoratorPattern {

    public static void main(String[] args) {
        BasicStringDealer allDealer = new UpperCaseStringDealer(new EncodedStringDealer(new BasicStringDealer(new StringDealerFileConsole())));
        allDealer.writeStringToConsole("Hello!!! How are y???");

        BasicStringDealer upperDealer = new UpperCaseStringDealer(new BasicStringDealer(new StringDealerFileConsole()));
        String fromResources = upperDealer.readFromResources();
        System.out.println(fromResources);
    }

}
