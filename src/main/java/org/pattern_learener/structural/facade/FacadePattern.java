package org.pattern_learener.structural.facade;

import java.io.File;

/**
 * Суть паттерна - это структурный паттерн проектирования, который предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку.<p>
 * Применимость:<p>
 * - когда вам нужно представить простой или урезанный интерфейс к сложной подсистеме;<p>
 * - когда вы хотите разложить подсистему на отдельные слои;<p>
 * Преимущества и недостатки:<p>
 * + изолирует клиентов от компонентов сложной подсистемы;<p>
 * - фасад рискует стать божественным объектом, привязанным ко всем классам программы<p>
 * Реализация:<p>
 * 1. Определите, можно ли создать более простой интерфейс, чем тот, который предоставляет сложная подсистема.
 * Вы на правильном пути, если этот интерфейс избавит клиента от необходимости знать о подробностях подсистемы.<p>
 * 2. Создайте класс фасада, реализующий этот интерфейс. Он должен переадресовывать вызовы клиента нужным объектам подсистемы.
 * Фасад должен будет позаботиться о том, чтобы правильно инициализировать объекты подсистемы.<p>
 * 3. Вы получите максимум пользы, если клиент будет работать только с фасадом.
 * В этом случае изменения в подсистеме будут затрагивать только код фасада, а клиентский код останется рабочим.<p>
 * 4. Если ответственность фасада начинает размываться, подумайте о введении дополнительных фасадов.
 */
public class FacadePattern {

    public static void main(String[] args) {
        VideoConversionFacade converter = new VideoConversionFacade();
        File mp4Video = converter.convertVideo("youtubevideo.ogg", "mp4");
    }

}
